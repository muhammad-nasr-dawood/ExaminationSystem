// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace ExaminationSystem.Core.Models;

public partial class ExaminationDBContext : DbContext
{
    public ExaminationDBContext(DbContextOptions<ExaminationDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AnswerTf> AnswerTfs { get; set; }

    public virtual DbSet<Branch> Branches { get; set; }

    public virtual DbSet<BranchDept> BranchDepts { get; set; }

    public virtual DbSet<Choice> Choices { get; set; }

    public virtual DbSet<Configuration> Configurations { get; set; }

    public virtual DbSet<Course> Courses { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<ExamModel> ExamModels { get; set; }

    public virtual DbSet<Image> Images { get; set; }

    public virtual DbSet<Intake> Intakes { get; set; }

    public virtual DbSet<IntakeDeptCourse> IntakeDeptCourses { get; set; }

    public virtual DbSet<Location> Locations { get; set; }

    public virtual DbSet<MultiChoiceResponse> MultiChoiceResponses { get; set; }

    public virtual DbSet<Pool> Pools { get; set; }

    public virtual DbSet<PoolQuestion> PoolQuestions { get; set; }

    public virtual DbSet<ProfileImage> ProfileImages { get; set; }

    public virtual DbSet<Question> Questions { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Session> Sessions { get; set; }

    public virtual DbSet<Staff> Staff { get; set; }

    public virtual DbSet<StaffBranchDepartmentManagement> StaffBranchDepartmentManagements { get; set; }

    public virtual DbSet<StaffBranchIntakeDepartmentCourseTeach> StaffBranchIntakeDepartmentCourseTeaches { get; set; }

    public virtual DbSet<StaffBranchIntakeWorksFor> StaffBranchIntakeWorksFors { get; set; }

    public virtual DbSet<StaffBranchManage> StaffBranchManages { get; set; }

    public virtual DbSet<Student> Students { get; set; }

    public virtual DbSet<StudentExamModel> StudentExamModels { get; set; }

    public virtual DbSet<StudentIntakeBranchDepartmentStudy> StudentIntakeBranchDepartmentStudies { get; set; }

    public virtual DbSet<Test> Tests { get; set; }

    public virtual DbSet<Topic> Topics { get; set; }

    public virtual DbSet<TrueFalseResponse> TrueFalseResponses { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AnswerTf>(entity =>
        {
            entity.HasKey(e => e.QuestionId).HasName("PK_AnswerTf_QuestionId");

            entity.Property(e => e.QuestionId).ValueGeneratedNever();

            entity.HasOne(d => d.Question).WithOne(p => p.AnswerTf).HasConstraintName("FK_AnswerTF_Quesstion");
        });

        modelBuilder.Entity<Branch>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Branch_Id");

            entity.HasOne(d => d.ZipCodeNavigation).WithOne(p => p.Branch)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Branches_Locations");
        });

        modelBuilder.Entity<BranchDept>(entity =>
        {
            entity.HasOne(d => d.Branch).WithMany(p => p.BranchDepts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BranchDepts_Branchs");

            entity.HasOne(d => d.Dept).WithMany(p => p.BranchDepts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BranchDepts_Depts");

            entity.HasOne(d => d.Intake).WithMany(p => p.BranchDepts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BranchDept_intakeId");
        });

        modelBuilder.Entity<Choice>(entity =>
        {
            entity.HasOne(d => d.Question).WithMany(p => p.Choices).HasConstraintName("FK_Choices_Questions");
        });

        modelBuilder.Entity<Configuration>(entity =>
        {
            entity.HasKey(e => e.PoolId).HasName("PK__Configur__EEFA8AEFB7572F0D");

            entity.Property(e => e.PoolId).ValueGeneratedNever();
            entity.Property(e => e.CanModify).HasDefaultValue(true);

            entity.HasOne(d => d.Pool).WithOne(p => p.Configuration).HasConstraintName("FK_Configurations_Pool");
        });

        modelBuilder.Entity<Course>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Courses__3214EC07EDD3BE86");

            entity.HasMany(d => d.Tops).WithMany(p => p.Crs)
                .UsingEntity<Dictionary<string, object>>(
                    "CourseTopic",
                    r => r.HasOne<Topic>().WithMany()
                        .HasForeignKey("TopId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__Course_To__Top_I__498EEC8D"),
                    l => l.HasOne<Course>().WithMany()
                        .HasForeignKey("CrsId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__Course_To__Crs_I__489AC854"),
                    j =>
                    {
                        j.HasKey("CrsId", "TopId").HasName("Set_PK");
                        j.ToTable("Course_Topics");
                        j.IndexerProperty<int>("CrsId").HasColumnName("Crs_Id");
                        j.IndexerProperty<int>("TopId").HasColumnName("Top_Id");
                    });
        });

        modelBuilder.Entity<Department>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Dept_Id");
        });

        modelBuilder.Entity<ExamModel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ExamMode__3214EC07BDACB61A");

            entity.HasOne(d => d.Pool).WithMany(p => p.ExamModels)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ExamModel_Pool");
        });

        modelBuilder.Entity<Image>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Images__3214EC07894DBE8D");

            entity.HasOne(d => d.Question).WithMany(p => p.Images)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Images_Questions");
        });

        modelBuilder.Entity<Intake>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Intakes__3214EC07B8E02774");

            entity.ToTable(tb => tb.HasTrigger("OnAddIntake"));

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.IsRunning).HasDefaultValue((byte)1);
        });

        modelBuilder.Entity<IntakeDeptCourse>(entity =>
        {
            entity.HasKey(e => new { e.DeptId, e.CourseId, e.IntakeId }).HasName("PK_DeptCourses");

            entity.Property(e => e.IsDeleted).HasDefaultValue(false);

            entity.HasOne(d => d.Course).WithMany(p => p.IntakeDeptCourses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DeptCourses_Course");

            entity.HasOne(d => d.Dept).WithMany(p => p.IntakeDeptCourses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DeptCourses_Dept");

            entity.HasOne(d => d.Intake).WithMany(p => p.IntakeDeptCourses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DeptCourses_Intakes");
        });

        modelBuilder.Entity<Location>(entity =>
        {
            entity.HasKey(e => e.ZipCode).HasName("PK__Location__2CC2CDB9DE47BF7B");
        });

        modelBuilder.Entity<MultiChoiceResponse>(entity =>
        {
            entity.HasKey(e => new { e.StdSsn, e.ExamId, e.QuestionId }).HasName("PK__MultiCho__E93C77EF8DFCE75E");

            entity.HasOne(d => d.Exam).WithMany(p => p.MultiChoiceResponses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MultiChoiceResponse_Exam");

            entity.HasOne(d => d.Question).WithMany(p => p.MultiChoiceResponses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MultiChoiceResponse_Question");

            entity.HasOne(d => d.StdSsnNavigation).WithMany(p => p.MultiChoiceResponses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MultiChoiceResponse_Student");

            entity.HasOne(d => d.Choice).WithMany(p => p.MultiChoiceResponses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MultiChoiceResponse_Answer");
        });

        modelBuilder.Entity<Pool>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Pools__3214EC075BC0AABE");

            entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.IsActive).HasDefaultValue((byte)1);

            entity.HasOne(d => d.Branch).WithMany(p => p.Pools)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Configurations_Branch");

            entity.HasOne(d => d.Course).WithMany(p => p.Pools)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Configurations_Course");

            entity.HasOne(d => d.Dept).WithMany(p => p.Pools)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Configurations_Dept");

            entity.HasOne(d => d.Intake).WithMany(p => p.Pools).HasConstraintName("FK_Pools_Intake");

            entity.HasOne(d => d.Staff).WithMany(p => p.Pools)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Configurations_Staff");
        });

        modelBuilder.Entity<PoolQuestion>(entity =>
        {
            entity.HasKey(e => new { e.PoolId, e.QuestionId }).HasName("PK");

            entity.Property(e => e.IsIncluded).HasDefaultValue((byte)0);

            entity.HasOne(d => d.Pool).WithMany(p => p.PoolQuestions).HasConstraintName("FK_PoolQuestion_Pool");

            entity.HasOne(d => d.Question).WithMany(p => p.PoolQuestions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PoolQuestion_Question");
        });

        modelBuilder.Entity<ProfileImage>(entity =>
        {
            entity.HasKey(e => e.ImageId).HasName("PK__ProfileI__7516F70C02E802E9");
        });

        modelBuilder.Entity<Question>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Question__3214EC07A202E58A");

            entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Staff).WithMany(p => p.Questions).HasConstraintName("FK_Questions_Staff");

            entity.HasOne(d => d.Topic).WithMany(p => p.Questions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Question_Topic");

            entity.HasMany(d => d.ExamModels).WithMany(p => p.Questions)
                .UsingEntity<Dictionary<string, object>>(
                    "ExamQuestion",
                    r => r.HasOne<ExamModel>().WithMany()
                        .HasForeignKey("ExamModelId")
                        .HasConstraintName("FK_ExamQuestion_Exam"),
                    l => l.HasOne<Question>().WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ExamQuestion_Questions"),
                    j =>
                    {
                        j.HasKey("QuestionId", "ExamModelId");
                        j.ToTable("ExamQuestion");
                    });
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Roles__3214EC070065C3C5");
        });

        modelBuilder.Entity<Session>(entity =>
        {
            entity.ToView("Session");
        });

        modelBuilder.Entity<Staff>(entity =>
        {
            entity.HasKey(e => e.Ssn).HasName("PK__Staff__CA1E8E3D2E07F881");

            entity.ToTable(tb => tb.HasTrigger("trg_EnsureStaffUserIsnotStudentUser"));

            entity.Property(e => e.Ssn).ValueGeneratedNever();
            entity.Property(e => e.Salary).HasDefaultValue(10000m);

            entity.HasOne(d => d.SsnNavigation).WithOne(p => p.Staff).HasConstraintName("FK__Staff__SSN__57DD0BE4");

            entity.HasMany(d => d.Roles).WithMany(p => p.StaffSsns)
                .UsingEntity<Dictionary<string, object>>(
                    "StaffRole",
                    r => r.HasOne<Role>().WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__StaffRole__RoleI__65370702"),
                    l => l.HasOne<Staff>().WithMany()
                        .HasForeignKey("StaffSsn")
                        .HasConstraintName("FK__StaffRole__Staff__6442E2C9"),
                    j =>
                    {
                        j.HasKey("StaffSsn", "RoleId").HasName("PK__StaffRol__8D7DEA63DB110087");
                        j.ToTable("StaffRoles");
                        j.IndexerProperty<long>("StaffSsn").HasColumnName("StaffSSN");
                    });
        });

        modelBuilder.Entity<StaffBranchDepartmentManagement>(entity =>
        {
            entity.HasKey(e => new { e.BranchId, e.DepartmentId, e.IntakeId }).HasName("PK_StaffBranchDepartmentManagement_1");

            entity.Property(e => e.HiringDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Branch).WithMany(p => p.StaffBranchDepartmentManagements)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StaffBranchDepartmentManagement_Branch");

            entity.HasOne(d => d.Department).WithMany(p => p.StaffBranchDepartmentManagements)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StaffBranchDepartmentManagement_Departments");

            entity.HasOne(d => d.Intake).WithMany(p => p.StaffBranchDepartmentManagements)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StaffBranchDepartmentManagement_intakeId");

            entity.HasOne(d => d.StaffSsnNavigation).WithOne(p => p.StaffBranchDepartmentManagement)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StaffBranchDepartmentManagement_Staff");

            entity.HasOne(d => d.BranchDept).WithOne(p => p.StaffBranchDepartmentManagement)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BranchId_DeptId_IntakeId");
        });

        modelBuilder.Entity<StaffBranchIntakeDepartmentCourseTeach>(entity =>
        {
            entity.HasOne(d => d.Branch).WithMany(p => p.StaffBranchIntakeDepartmentCourseTeaches)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StaffBranchIntakeDepartmentCourseTeach_Branch");

            entity.HasOne(d => d.Course).WithMany(p => p.StaffBranchIntakeDepartmentCourseTeaches)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StaffBranchIntakeDepartmentCourseTeach_Courses");

            entity.HasOne(d => d.Department).WithMany(p => p.StaffBranchIntakeDepartmentCourseTeaches)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StaffBranchIntakeDepartmentCourseTeach_Departments");

            entity.HasOne(d => d.Intake).WithMany(p => p.StaffBranchIntakeDepartmentCourseTeaches)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StaffBranchIntakeDepartmentCourseTeach_Intakes");

            entity.HasOne(d => d.StaffSsnNavigation).WithMany(p => p.StaffBranchIntakeDepartmentCourseTeaches)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StaffBranchINtakeDepartmentCourseTeach_Staff");

            entity.HasOne(d => d.BranchDept).WithMany(p => p.StaffBranchIntakeDepartmentCourseTeaches)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BranchId_DeptId_IntakeId_Teach");

            entity.HasOne(d => d.IntakeDeptCourse).WithMany(p => p.StaffBranchIntakeDepartmentCourseTeaches)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StaffBranchIntakeDepartmentCourseTeach_IntakeDeptCourses");
        });

        modelBuilder.Entity<StaffBranchIntakeWorksFor>(entity =>
        {
            entity.HasKey(e => new { e.StaffSsn, e.BranchId, e.IntakeId }).HasName("PK_StaffBranchDepartmentWorksFor");

            entity.Property(e => e.HiringDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Branch).WithMany(p => p.StaffBranchIntakeWorksFors)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StaffBranchDepartmentWorksFor_Branch");

            entity.HasOne(d => d.Intake).WithMany(p => p.StaffBranchIntakeWorksFors)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StaffBranchDeptWorksFor_intakeId");

            entity.HasOne(d => d.StaffSsnNavigation).WithMany(p => p.StaffBranchIntakeWorksFors)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StaffBranchDepartmentWorksFor_Staff");
        });

        modelBuilder.Entity<StaffBranchManage>(entity =>
        {
            entity.Property(e => e.HiringDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Branch).WithOne(p => p.StaffBranchManage)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StaffBranchManage_Branch");

            entity.HasOne(d => d.Intake).WithMany(p => p.StaffBranchManages)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StaffBranch_intakeId");

            entity.HasOne(d => d.StaffSsnNavigation).WithMany(p => p.StaffBranchManages)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StaffBranchManage_Staff");
        });

        modelBuilder.Entity<Student>(entity =>
        {
            entity.HasKey(e => e.Ssn).HasName("PK__Students__CA1E8E3D46A0974A");

            entity.ToTable(tb => tb.HasTrigger("trg_EnsureStudentUserIsnotStaffUser"));

            entity.Property(e => e.Ssn).ValueGeneratedNever();

            entity.HasOne(d => d.SsnNavigation).WithOne(p => p.Student).HasConstraintName("FK__Students__SSN__6AEFE058");
        });

        modelBuilder.Entity<StudentExamModel>(entity =>
        {
            entity.HasKey(e => new { e.StudentId, e.ExamModelId }).HasName("PK_StudentExamModel_StudentId_ExamModelId");

            entity.Property(e => e.Attendance).HasDefaultValue(false);

            entity.HasOne(d => d.ExamModel).WithMany(p => p.StudentExamModels).HasConstraintName("PK_StudentExamModel_ExamModels");

            entity.HasOne(d => d.Student).WithMany(p => p.StudentExamModels)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PK_StudentExamModel_Students");
        });

        modelBuilder.Entity<StudentIntakeBranchDepartmentStudy>(entity =>
        {
            entity.ToTable("StudentIntakeBranchDepartmentStudy", tb => tb.HasTrigger("Trg_StudentIntakeBranchDepartmentStudy_MaxIntakes"));

            entity.HasOne(d => d.Branch).WithMany(p => p.StudentIntakeBranchDepartmentStudies)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StudentIntakeBranchDepartmentStudy_Branch");

            entity.HasOne(d => d.Department).WithMany(p => p.StudentIntakeBranchDepartmentStudies)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StudentIntakeBranchDepartmentStudy_Departments");

            entity.HasOne(d => d.Intake).WithMany(p => p.StudentIntakeBranchDepartmentStudies)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StudentIntakeBranchDepartmentStudy_Intakes");

            entity.HasOne(d => d.StudentSsnNavigation).WithMany(p => p.StudentIntakeBranchDepartmentStudies)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StudentIntakeBranchDepartmentStudy_Students");

            entity.HasOne(d => d.BranchDept).WithMany(p => p.StudentIntakeBranchDepartmentStudies)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BranchId_DeptId_IntakeId_study");
        });

        modelBuilder.Entity<Test>(entity =>
        {
            entity.HasKey(e => e.Qid).HasName("PK__test__CAB1462B2453EC1D");
        });

        modelBuilder.Entity<Topic>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Topics__3214EC076D2A933A");
        });

        modelBuilder.Entity<TrueFalseResponse>(entity =>
        {
            entity.HasKey(e => new { e.StdSsn, e.ExamId, e.QuestionId }).HasName("PK__TrueFals__E93C77EF202DAA7E");

            entity.HasOne(d => d.Exam).WithMany(p => p.TrueFalseResponses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TrueFalseResponse_Exam");

            entity.HasOne(d => d.Question).WithMany(p => p.TrueFalseResponses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TrueFalseResponse_Question");

            entity.HasOne(d => d.StdSsnNavigation).WithMany(p => p.TrueFalseResponses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TrueFalseResponse_Student");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Ssn).HasName("PK__Users__CA1E8E3D310E34C8");

            entity.Property(e => e.Ssn).ValueGeneratedNever();
            entity.Property(e => e.Gender).IsFixedLength();
            entity.Property(e => e.IsActive).HasDefaultValue(true);

            entity.HasOne(d => d.Image).WithMany(p => p.Users)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Users_Images_ImageId");

            entity.HasOne(d => d.ZipCodeNavigation).WithMany(p => p.Users)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Users_Locations");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}