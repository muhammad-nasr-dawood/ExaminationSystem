@model AccountEditViewModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
	ViewData["Title"] = "Account settings - Account";
}

@section VendorStyles {
<link rel="stylesheet" href="~/vendor/libs/select2/select2.css" />
<link rel="stylesheet" href="~/vendor/libs/&#64;form-validation/form-validation.css" />
<link rel="stylesheet" href="~/vendor/libs/animate-css/animate.css" />
<link rel="stylesheet" href="~/vendor/libs/sweetalert2/sweetalert2.css" />
<link rel="stylesheet" href="~/vendor/libs/bootstrap-select/bootstrap-select.css" />
}

@section VendorScripts {

<script src="~/vendor/libs/select2/select2.js"></script>
<script src="~/vendor/libs/&#64;form-validation/popular.js"></script>
<script src="~/vendor/libs/&#64;form-validation/bootstrap5.js"></script>
<script src="~/vendor/libs/&#64;form-validation/auto-focus.js"></script>
<script src="~/vendor/libs/cleavejs/cleave.js"></script>
<script src="~/vendor/libs/cleavejs/cleave-phone.js"></script>
<script src="~/vendor/libs/sweetalert2/sweetalert2.js"></script>
<script src="~/vendor/libs/bootstrap-select/bootstrap-select.js"></script>
<script src="~/vendor/libs/moment/moment.js"></script>

<script src="~/vendor/libs/sweetalert2/sweetalert2.js"></script>
}



@* ************** Content ************** *@
<div class="row">
	<div class="col-md-12">
		<div class="nav-align-top">
			<ul class="nav nav-pills flex-column flex-md-row mb-6 gap-2 gap-lg-0">
				<li class="nav-item"><a class="nav-link active" href="javascript:void(0);"><i class="ti-sm ti ti-users me-1_5"></i> Account</a></li>
				<li class="nav-item"><a class="nav-link" href="AccountSettingsSecurity"><i class="ti-sm ti ti-lock me-1_5"></i> Security</a></li>
				@* <li class="nav-item"><a class="nav-link" href="AccountSettingsBilling"><i class="ti-sm ti ti-bookmark me-1_5"></i> Billing & Plans</a></li> *@
				@* <li class="nav-item"><a class="nav-link" href="AccountSettingsNotifications"><i class="ti-sm ti ti-bell me-1_5"></i> Notifications</a></li> *@
				@* <li class="nav-item"><a class="nav-link" href="AccountSettingsConnections"><i class="ti-sm ti ti-link me-1_5"></i> Connections</a></li> *@
			</ul>
		</div>
		<div class="card mb-6">
			<!-- Account -->
			@await Html.PartialAsync("_ProfileImageUploadPartial", Model)


			<div class="card-body pt-4">
				<form id="formAccountSettings" method="post" asp-action="Update">
					@Html.AntiForgeryToken();
					<div class="row">
						<div class="mb-4 col-md-6">
							<label asp-for="Fname" class="form-label">First Name</label>
							<input class="form-control" type="text" asp-for="Fname"   />
							<span asp-validation-for="Fname"></span>
						</div>
						<div class="mb-4 col-md-6">
							<label asp-for="Lname" class="form-label">Last Name</label>
							<input class="form-control" type="text"  asp-for="Lname"  />
							<span asp-validation-for="Lname"></span>
						</div>
						<div class="mb-4 col-md-6">
							<label asp-for="Email" class="form-label">E-mail</label>
							<input class="form-control" type="text" asp-for="Email"  placeholder="john.doe&#64;example.com" />
							<span asp-validation-for="Email"></span>
						</div>
						@* <div class="mb-4 col-md-6"> *@
						@* 	<label for="organization" class="form-label">Organization</label> *@
						@* 	<input type="text" class="form-control" id="organization" name="organization" value='@TempData.Peek("authorName")' /> *@
						@* </div> *@
						<div class="mb-4 col-md-6">
							<label class="form-label" asp-for="PhoneNumber">Phone Number</label>
							<div class="input-group input-group-merge">
								<span class="input-group-text">EG (+2)</span>
								<input type="text" asp-for="PhoneNumber" class="form-control" placeholder="202 555 0111" />
								<span asp-validation-for="PhoneNumber"></span>
							</div>
						</div>
						<div class="mb-4 col-md-6">
							<label asp-for="StreetNo" class="form-label">Street No</label>
							<input type="text" class="form-control" asp-for="StreetNo" placeholder="231465" maxlength="6" />
							<span asp-validation-for="StreetNo"></span>
						</div>
						@* <div class="col-sm-6"> *@
						@* 	<label class="form-label" for="last-name">Last Name</label> *@
						@* 	<input type="text" id="last-name" class="form-control" placeholder="Doe" /> *@
						@* </div> *@
						<div class="col-sm-6">
							<label class="form-label" asp-for="Gender">Gender</label>
							<select class="selectpicker w-auto" asp-for="Gender" data-style="btn-transparent" data-icon-base="ti" data-tick-icon="ti-check text-white">
								<option value="M">Male</option>
								<option value="F">Female</option>
							</select>
							<span asp-validation-for="Gender"></span>
						</div>
						<div class="col-sm-6 mb-0">
							<label for="dobBasic" asp-for="Bd" class="form-label">DOB</label>
							<input type="date" asp-for="Bd" class="form-control">
							<span asp-validation-for="Bd"></span>
						</div>
								@if (User.IsInRole("Student"))
								{
								  <div class="mb-4 col-md-6">
									  <label asp-for="StudentFaculty" class="form-label">Faculty</label>
									  <input class="form-control" type="text"  asp-for="StudentFaculty"   />
									  <span asp-validation-for="StudentFaculty"></span>
								  </div>
								  <div class="mb-4 col-md-6">
									  <label asp-for="GradYear" class="form-label">Grad Year</label>
									  <input class="form-control" type="text"  asp-for="GradYear"  />
									  <span asp-validation-for="GradYear"></span>
								  </div>
								  <div class="mb-4 col-md-6">
									  <label asp-for="Gpa" class="form-label">GPA</label>
									  <input class="form-control" type="text" asp-for="Gpa"  placeholder="john.doe&#64;example.com" />
									  <span asp-validation-for="Gpa"></span>
								  </div>
							
								}
								<div class="col-sm-6">
									<label class="form-label" asp-for="ZipCode">Location</label>
									<select class="select2 form-select  w-auto" data-allow-clear="true" asp-for="ZipCode" data-style="btn-transparent" data-icon-base="ti" data-tick-icon="ti-check text-white">
											  @foreach (var item in ViewBag.Locations)
											  {
												  <option value="@item.ZipCode">@item.Governate</option>
											  }
											</select>
											<span asp-validation-for="ZipCode"></span>
										</div>
					</div>
					<div class="mt-2">
						<button id="submitButton" type="submit" class="btn btn-primary me-3">Save changes</button>
						<button type="reset" class="btn btn-label-secondary">Cancel</button>
					</div>
				</form>
			</div>
			<!-- /Account -->
		</div>
		<div class="card">
			<h5 class="card-header">Delete Account</h5>
			<div class="card-body">
				<div class="mb-6 col-12 mb-0">
					<div class="alert alert-warning">
						<h5 class="alert-heading mb-1">Are you sure you want to delete your account?</h5>
						<p class="mb-0">Once you delete your account, there is no going back. Please be certain.</p>
					</div>
				</div>
				<form id="formAccountDeactivation" onsubmit="return false">
					<div class="form-check my-8">
						<input class="form-check-input" type="checkbox" name="accountActivation" id="accountActivation" />
						<label class="form-check-label" for="accountActivation">I confirm my account deactivation</label>
					</div>
					<button type="submit" class="btn btn-danger deactivate-account" disabled>Deactivate Account</button>
				</form>
			</div>
		</div>
	</div>
</div>
@section PageScripts {
    <script src="~/js/pages-account-settings-account.js"></script> 
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
	<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
	<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>

    <script>
		$(document).ready(function () {

		$("form").validate();
		$("form input").keyup(function() {
			$(this).valid();// enforce validation 
		});
			 
        const uploadedAvatar = document.getElementById("uploadedAvatar");
        const uploadInput = document.getElementById("upload");
        const resetButton = document.getElementById("resetButton");
        const removeButton = document.getElementById("removeButton");

        const defaultImageUrl = "/img/defaultImages/defaultImage.png";
        let currentImageUrl = uploadedAvatar.getAttribute("src").split("?")[0];

        function updateButtonStates() {
            const isDefault = currentImageUrl.includes(defaultImageUrl);
            removeButton.disabled = isDefault;
        }

        uploadInput.addEventListener("change", async function (e) {
            const file = e.target.files[0];
            if (!file) return;

            const confirmUpload = await Swal.fire({
                title: 'Upload new image?',
                text: 'Are you sure you want to change your profile picture?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Yes, upload it'
            });

            if (!confirmUpload.isConfirmed) {
                uploadInput.value = '';
                return;
            }

            Swal.fire({
                title: 'Uploading...',
                allowOutsideClick: false,
                didOpen: () => Swal.showLoading()
            });

            try {
                const validTypes = ['image/jpeg', 'image/png', 'image/gif'];
                if (!validTypes.includes(file.type)) throw new Error('Only JPG, PNG, and GIF images are allowed');

                if (file.size > 800 * 1024) throw new Error('Image must be smaller than 800KB');

                const formData = new FormData();
                formData.append("file", file);

                const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value ||
                              document.querySelector('meta[name="__RequestVerificationToken"]')?.content;
                if (token) formData.append("__RequestVerificationToken", token);

                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 30000);

                const response = await fetch("/Account/UploadImage", {
                    method: "POST",
                    body: formData,
                    signal: controller.signal
                });

                clearTimeout(timeoutId);
                if (!response.ok) {
                    const errorData = await response.json().catch(() => null);
                    throw new Error(errorData?.message || `Server error: ${response.status}`);
                }

                const data = await response.json();
                uploadedAvatar.src = data.imageUrl + '?' + new Date().getTime();
                currentImageUrl = data.imageUrl;
                updateButtonStates();

                await Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: 'Profile image updated',
                    timer: 2000
                });

            } catch (error) {
                console.error("Upload error:", error);
                resetButton.click();
                await Swal.fire({
                    icon: 'error',
                    title: 'Upload Failed',
                    text: error.message || 'Failed to upload image',
                    timer: 1500
                });
            } finally {
                e.target.value = '';
            }
        });

        resetButton.addEventListener("click", () => {
            uploadedAvatar.src = defaultImageUrl + '?' + new Date().getTime();
            currentImageUrl = defaultImageUrl;
            updateButtonStates();
        });

        removeButton.addEventListener("click", async () => {
            const confirmRemove = await Swal.fire({
                title: 'Remove Image?',
                text: "This will permanently remove your profile image. Continue?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, remove it'
            });

            if (!confirmRemove.isConfirmed) return;

            try {
                const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value ||
                              document.querySelector('meta[name="__RequestVerificationToken"]')?.content;

                const response = await fetch("/Account/RemoveImage", {
                    method: "POST",
                    headers: { "RequestVerificationToken": token }
                });

                if (!response.ok) throw new Error("Failed to remove image.");

                const data = await response.json();
                uploadedAvatar.src = data.imageUrl + '?' + new Date().getTime();
                currentImageUrl = data.imageUrl;
                updateButtonStates();

                await Swal.fire('Removed!', 'Your image has been deleted.', 'success');

            } catch (error) {
                console.error("Remove error:", error);
                await Swal.fire('Error', error.message || 'Failed to delete image', 'error');
            }
        });

        document.addEventListener("DOMContentLoaded", updateButtonStates);

				 $('#submitButton').on('click', function(e) {
			e.preventDefault();

			var formData = $('#formAccountSettings').serialize();
			formData += '&__RequestVerificationToken=' + $('input[name="__RequestVerificationToken"]').val();

			$.ajax({
				url: $('#formAccountSettings').attr('action'),
				type: 'POST',
				data: formData,
				success: function(response) {
					if (response.success && response.redirectUrl) {
						// Show success message briefly before redirecting
						Swal.fire({
							icon: 'success',
							title: 'Success!',
							text: 'Account updated successfully',
							timer: 1500,
							showConfirmButton: false
						}).then(() => {
							window.location.href = response.redirectUrl;
						});
					}
				},
				error: function(xhr) {
					Swal.fire({
						icon: 'error',
						title: 'Error',
						text: xhr.responseJSON?.message || 'Failed to update account'
					});
				}
			});
		});
		});
    </script>
}
